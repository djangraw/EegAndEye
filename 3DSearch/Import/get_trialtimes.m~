function [trialtimes] = get_trialtimes(text_file)

% [trialtimes] = get_trialtimes(text_file)
%
% -Given the text file output from the eyetracker, finds and returns 
% the time when each trial was loaded, started, and ended.  
% -INPUT text_file is the filename of a .txt file in the current path - the
% output from a post-hoc "report" generated by DataViewer.
% -OUTPUT trialtimes is an mx3 matrix, where m is the number of trials.
% Column 1 is the timestamp of the trial loading, column 2 is the timestamp
% of the trial starting, and column 3 is the timestamp of the trial ending.
%
% Created 7/26/10 by DJ (to replace get_trialtimes_portversion).
% Updated 7/28/10 by DJ (comments).
% Updated 8/19/10 by DJ (eliminated output trialtypes)
% Updated 2/8/11 by DJ - initialized load/start/end_times.

% Setup
fid = fopen(text_file);
fseek(fid,0,'eof'); % find end of file
eof = ftell(fid);
fseek(fid,0,'bof'); % rewind to beginning

word = 'TRIAL'; % the word we check for to find relevant lines
i = 0;          % number of messages found so far

% Get the write_ioport messages
[load_times, start_times, end_times] = deal([]);
while ftell(fid) < eof % if we haven't reached the end of the text file
    str = fgetl(fid); % read in next line of text file
    if findstr(str,word); % check for the code-word indicating a relevant message was written
        if findstr(str,'LOAD')
            i = i+1; % increment number of trials found
            load_times(i) = sscanf(str,'MSG %d'); % read timestamp
        elseif findstr(str,'START')
            start_times(i) = sscanf(str,'MSG %d'); % read timestamp
        elseif findstr(str,'END')
            end_times(i) = sscanf(str,'MSG %d'); % read timestamp
        end
    end
end

% Did we find any messages?
if i == 0 % if no
    warning(sprintf('Couldn''t find ''%s'' anywhere in document ''%s''!'...
        ,word,text_file))
end

% Make sure they're the same length
if ~isequal(numel(load_times),numel(start_times),numel(end_times))
    error('Numbers of load, start, and end trial codes don''t match!');
end

% Create the final product
trialtimes(:,1) = load_times;
trialtimes(:,2) = start_times;
trialtimes(:,3) = end_times;

% Clean up
fclose(fid);