function pd_interp = find_blink(pd,time,ascfile)

% INPUTS:
% 
% - pd is the original vector of pupil diameter. If there is any NaN
%   element within the vector, then these points shall be interpolated first
%   so as to avoid error when using this function.
%
% - time is a vector of time corresponding to the experiment, i.e.
%   1:length(time)
% - ascfile is the file name for the .asc file generated by Eyelink, an
%   example for the filename would be : 'pdvo_06_M_062711_13_13pm_01t.asc'
%
% OUTPUT:
% - pd_interp is the vector of pupil diameter after all the pre-blink and
%   post-blink elements are discarded and re-interpolated.
%
% USAGE:
%
% pd_interp = find_blink(pd,time,ascfile);
%
% Created 06/13/11 by LH.



% derivative for the time series of pupil diameter
der = diff(pd);

% start and end time of blink
[start_time end_time] = find_events_lb(ascfile,'blink'); % can switch to find_events function
start_time = start_time - min(time);
end_time = end_time - min(time);

pd_interp = pd;

% set the marker for searching the real beginning and end for a blink
marker = 2;
iter = 0;

% iterate 10 times
% For the beginning of a real blink, we search for the last element which
% has a derivative within the range of [-1 10] for each pre_blink vector.

% Similarly, for the end of a real blink, we search for the first element
% which has a derivative within the range of [-10 1] for each post_blink
% vector.

while  (any(diff(pd_interp)>50) || any(diff(pd_interp)<-50)) && iter<10
    
    post_blink_index = zeros(length(start_time),1);
    pre_blink_index = post_blink_index;
    
    for i = 1:length(start_time)
    
        pre_blink = der(1:start_time(i)-marker);
        
        % if pre_blink is [], then simply break out of the loop.
        if isempty(pre_blink)
            empty_marker_1 = i;
            break;
        else
            pre_blink_index(i) = find(pre_blink>-1 & pre_blink<10,1,'last');
        end    

        post_blink = der(end_time(i)+marker+1:end);
    
        % if post_blink is [], then simply break out of the loop.
        if isempty(post_blink)
            empty_marker_2 = i;
            break;
        else
            post_blink_index(i) = end_time(i)+marker-1+find(post_blink>-10 & post_blink<1,1);
        end
    
    end
    
    % Interpolate the blinks
    if isempty(pre_blink)
            for i = 1:empty_marker_1-1 % only take the last non-empty pre_blink elements
                t = pre_blink_index(i):(post_blink_index(i)-pre_blink_index(i)):post_blink_index(i);
                if pd_interp(post_blink_index(i)) == pd_interp(pre_blink_index(i))
                    p = [pd_interp(pre_blink_index(i)),pd_interp(post_blink_index(i))];
                else
                    p = pd_interp(pre_blink_index(i)):(pd_interp(post_blink_index(i))-pd_interp(pre_blink_index(i))):pd_interp(post_blink_index(i));
                end
                x = pre_blink_index(i):post_blink_index(i);
                pd_interp(pre_blink_index(i):post_blink_index(i)) = interp1(t,p,x);
            end
            
    elseif isempty(post_blink)
            for i = 1:empty_marker_2-1 % only take the last non-empty post_blink elements
                t = pre_blink_index(i):(post_blink_index(i)-pre_blink_index(i)):post_blink_index(i);
                if pd_interp(post_blink_index(i)) == pd_interp(pre_blink_index(i))
                    p = [pd_interp(pre_blink_index(i)),pd_interp(post_blink_index(i))];
                else
                    p = pd_interp(pre_blink_index(i)):(pd_interp(post_blink_index(i))-pd_interp(pre_blink_index(i))):pd_interp(post_blink_index(i));
                end
                x = pre_blink_index(i):post_blink_index(i);
                pd_interp(pre_blink_index(i):post_blink_index(i)) = interp1(t,p,x);
            end
    
    else    
        for i = 1:length(start_time)
            t = pre_blink_index(i):(post_blink_index(i)-pre_blink_index(i)):post_blink_index(i);
            if pd_interp(post_blink_index(i)) == pd_interp(pre_blink_index(i))
                p = [pd_interp(pre_blink_index(i)),pd_interp(post_blink_index(i))];
            else
                p = pd_interp(pre_blink_index(i)):(pd_interp(post_blink_index(i))-pd_interp(pre_blink_index(i))):pd_interp(post_blink_index(i));
            end
            x = pre_blink_index(i):post_blink_index(i);
            pd_interp(pre_blink_index(i):post_blink_index(i)) = interp1(t,p,x);
        end
    
    end
    
    % increase the marker within each iteration to get rid of possible
    % blinks.
    marker = marker + 20;
    iter = iter + 1;
end
end
